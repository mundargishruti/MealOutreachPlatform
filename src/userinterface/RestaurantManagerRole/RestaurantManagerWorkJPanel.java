/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantManagerRole;

import code.EcoSystem;
import code.Org.OrgRestaurant;
import code.Org.OrderProcess;
import code.Org.Organization;
import code.SystemUserAccount.SystemUsers;
import code.ProcessQueue.RestaurantRequest;
import code.ProcessQueue.OrderPlaceRequest;
import code.ProcessQueue.ProcessRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Rajvi
 */
public class RestaurantManagerWorkJPanel extends javax.swing.JPanel {

    private JPanel jPanel;
    private EcoSystem ecosystem;
    private SystemUsers usrAcnt;
    private OrgRestaurant bloodBankMngrOrg;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public RestaurantManagerWorkJPanel(JPanel userProcessContainer, SystemUsers account, Organization organization, EcoSystem business) {
        initComponents();

        this.jPanel = userProcessContainer;
        this.usrAcnt = account;
        this.ecosystem = business;
        this.bloodBankMngrOrg = (OrgRestaurant) organization;

        pplTbl();
    }

    public void pplTbl() {
        DefaultTableModel model = (DefaultTableModel) restaurantTable.getModel();

        model.setRowCount(0);


        for (ProcessRequest request : bloodBankMngrOrg.getProcessQueue().getProcesReq()) {

            Object[] row = new Object[7];
            row[0] = request;
            row[1] = request.getSndr().getEmploye().getEmpName();
            row[2] = ((OrderPlaceRequest) request).getRestaurantManagement();
            row[3] = request.getProcessStatus();
            row[4] = ((OrderPlaceRequest ) request).getBeneficiary().getBenFirstName() + " " + ((OrderPlaceRequest) request).getBeneficiary().getBenLastName();
            row[5] = ((OrderPlaceRequest) request).getBeneficiary().getBenId();
            row[6]=((OrderPlaceRequest) request).getAmountOfFood();
            model.addRow(row);
        }
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        restaurantTable.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        restaurantTable = new javax.swing.JTable();
        assignToMeButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        restaurantImage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(253, 249, 232));
        setLayout(null);

        restaurantTable.setBackground(new java.awt.Color(204, 204, 204));
        restaurantTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Beneficiary Name", "Beneficiary Id", "Amount of Food"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(restaurantTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(10, 20, 730, 90);

        assignToMeButton.setBackground(new java.awt.Color(204, 130, 43));
        assignToMeButton.setFont(new java.awt.Font("YuGothic", 1, 18)); // NOI18N
        assignToMeButton.setForeground(java.awt.Color.white);
        assignToMeButton.setText("Assign to me");
        assignToMeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeButtonActionPerformed(evt);
            }
        });
        add(assignToMeButton);
        assignToMeButton.setBounds(190, 130, 140, 40);

        processButton.setBackground(new java.awt.Color(204, 130, 43));
        processButton.setFont(new java.awt.Font("YuGothic", 1, 18)); // NOI18N
        processButton.setForeground(new java.awt.Color(255, 255, 255));
        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });
        add(processButton);
        processButton.setBounds(370, 130, 140, 40);

        restaurantImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/foodgiphy.gif"))); // NOI18N
        add(restaurantImage);
        restaurantImage.setBounds(130, 190, 480, 360);
    }// </editor-fold>//GEN-END:initComponents

    private void assignToMeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeButtonActionPerformed

        int selectedRow = restaurantTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please select a row first");
            return;
        }

        OrderPlaceRequest request = (OrderPlaceRequest) restaurantTable.getValueAt(selectedRow, 0);
        if (request.getRestaurantManagement() == null) {
            if (request.getProcessStatus().equalsIgnoreCase("SentToRestaurant")) {
                request.setRestaurantManagement(usrAcnt);
                request.setProcessStatus("Pending on Restaurant");
                //  request.setReceiver(userAccount);
                pplTbl();
                JOptionPane.showMessageDialog(null, "The request is assigned to You!");
            } else {
                JOptionPane.showMessageDialog(null, "Cannot assign this order as the current status is: " + request.getProcessStatus());
            }
        }
        else
        {

            if(usrAcnt.equals(request.getOrderPlacedVolunteer()))

            {
                JOptionPane.showMessageDialog(null,"Request is already assigned to you");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Request is assigned to other volunteer");
            }
        }

    }//GEN-LAST:event_assignToMeButtonActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed

        int selectedRow = restaurantTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        OrderPlaceRequest request = (OrderPlaceRequest) restaurantTable.getValueAt(selectedRow, 0);

       // request.setStatus("Processing");
        RestaurantWorkRequestJPanel processWorkRequestJPanel = new RestaurantWorkRequestJPanel(jPanel, request);
        if (request.getRestaurantManagement() != null) {
            if (usrAcnt.equals(request.getRestaurantManagement())) {
                if (request.getProcessStatus().equalsIgnoreCase("Pending on Restaurant")) {

                    jPanel.add("processWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) jPanel.getLayout();
                    layout.next(jPanel);
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot process the request as the status is: " + request.getProcessStatus());
                }

            } else {

                JOptionPane.showMessageDialog(null, "Not authorised to process the request");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please assign the request first");
        }
    }//GEN-LAST:event_processButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToMeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel restaurantImage;
    private javax.swing.JTable restaurantTable;
    // End of variables declaration//GEN-END:variables
}
